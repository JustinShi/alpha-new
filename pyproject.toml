[tool.black]
line-length = 88
target-version = ['py312']
include = '\\.pyi?$'
exclude = '/(\\.git|\\.venv|\\.mypy_cache|\\.pytest_cache|build|dist)/'

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    'E', 'W',      # pycodestyle
    'F',           # Pyflakes
    'I',           # isort
    'N',           # pep8-naming
    'UP',          # pyupgrade
    'B',           # flake8-bugbear
    'A',           # flake8-builtins
    'C4',          # flake8-comprehensions
    'PIE',         # flake8-pie
    'PT',          # flake8-pytest-style
    'RET',         # flake8-return
    'SIM',         # flake8-simplify
    'PTH',         # flake8-use-pathlib
    'RUF',         # Ruff-specific rules
    'S',           # flake8-bandit (security)
    'T20',         # flake8-print
    'PL',          # pylint
]
ignore = [
    'E501',        # line too long (handled by black)
    'D100', 'D104',   # missing docstrings
    'PLR0913',     # too many arguments
    'PLR0911',     # too many return statements
    'PLR0912',     # too many branches
    'PLR0915',     # too many statements
    'ERA001',      # commented-out code
    'S101',        # use of assert (common in tests)
    'T201',        # print statements (for debugging)
    'PLR2004',     # magic value used in comparison
    'S603',        # subprocess call without shell=True
    'S607',        # starting a process with a partial executable path
]

[tool.ruff.lint.per-file-ignores]
"*.py" = ["D"]
"tests/*" = ["S101", "PLR2004", "S106", "S108"]
"examples/*" = ["T201", "S101", "S106", "S108"]
"src/alpha_new/main.py" = ["T201"]  # allow prints in main
"**/__init__.py" = ["F401"]  # allow unused imports in __init__.py

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "aiohttp.*",
    "aiofiles.*",
    "yaml.*",
    "pytest.*",
    "setuptools.*",
    "websockets.*",
    "httpx.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/alpha_new",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.poetry]
packages = [{include = "alpha_new", from = "src"}]

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"

[project]
name = "alpha-new"
version = "0.1.0"
description = "Alpha交易系统 - 专业的币安Alpha交易平台工具，支持自动化交易、资产管理、API集成等功能。"
authors = [
    {name = "JustinShi", email = "2223060161@qq.com"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    # Core HTTP client
    "httpx>=0.28.1,<0.29.0",

    # WebSocket support
    "websockets>=15.0.1,<16.0.0",

    # Async file operations
    "aiofiles>=23.2.1,<24.0.0",

    # Data validation and serialization
    "pydantic>=2.11.7,<3.0.0",
    "orjson>=3.10.18,<4.0.0",

    # Rich console output
    "rich>=14.0.0,<15.0.0",

    # Configuration and data formats
    "PyYAML>=6.0.1,<7.0.0",
    "python-dateutil>=2.9.0.post0,<3.0.0",

    # Proxy support (optional)
    "python-socks>=2.7.1,<3.0.0",

    # Type extensions for older Python compatibility
    "typing_extensions>=4.13.2,<5.0.0",
]

[project.scripts]
alpha-new = "src.alpha_new.main:main"
alpha-token = "src.examples.alpha_token_example:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1,<9.0.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "mypy>=1.10.0,<2.0.0",
    "black>=24.4.2,<25.0.0",
    "ruff>=0.4.4,<1.0.0",
    "pre-commit>=4.2.0,<5.0.0"
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
